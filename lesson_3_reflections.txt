# When would you want to use a remote repository rather than keeping all your work local?

flexibility to work from multi locations
eaiser access for others to collaborate on the repository
provides failsafe should something happen to your local machine, your repository would not be lost

# Why might you want to always pull changes manually rather than having Git automatically stay up-to-date
  with your remote repository?

I'll guess that it's mostly to avoid unwanted changes to the remote repository.

# Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are clones only visible on GitHub.
Clones are copies of local or remote repositories.
Branches create a child commit off of it's parent commit.

Use forks to clone another user's repository on GitHub so you can make your own modifications.
Use clone to make a copy of a local or remote repository.
Use branch to introduce a new commit point, seperate from the master branch.

# What is the benefit of having a copy of the last known state of the remote stored locally?

It insures you are working with the most recent commits from the remote, before you start introducing changes.

# How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Share directories/files locally or remotely, and/or transfer files back and forth between collaborates.

Beyond the learning curve, everything would be harder.
Git/GitHub (or similar version control system) is definitely easier/better if the project is to have any life
beyond it's creation. The learning curve is really the only hard part. And that just takes practice.
Managing a collaborative dev project without a version control system is like riding a bicycle on the highway,
in the middle lane... Good luck!
